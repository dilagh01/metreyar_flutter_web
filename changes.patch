diff --git a/pubspec.yaml b/pubspec.yaml
index 1111111..2222222 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -1,6 +1,16 @@
 name: metreyar_flutter_web
 description: Flutter Web SPA
-version: 1.0.0
+version: 1.0.1

 environment:
   sdk: '>=3.3.0 <4.0.0'
@@ -10,10 +10,16 @@ dependencies:
   flutter:
     sdk: flutter
   go_router: ^14.8.1
+  fl_chart: ^0.66.2
+  intl: ^0.19.0

 dev_dependencies:
   flutter_test:
     sdk: flutter
   flutter_lints: ^4.0.0
+
+flutter:
+  uses-material-design: true
+  assets:
+    - assets/
diff --git a/web/index.html b/web/index.html
index 3333333..4444444 100644
--- a/web/index.html
+++ b/web/index.html
@@ -1,6 +1,8 @@
 <!DOCTYPE html>
 <html>
   <head>
+    <!-- Needed for flutter build --base-href -->
+    <base href="$FLUTTER_BASE_HREF">
     <meta charset="UTF-8">
     <meta content="IE=Edge" http-equiv="X-UA-Compatible">
     <meta name="description" content="Metreyar Flutter Web">
@@ -20,6 +22,7 @@
   </head>
   <body>
     <script src="flutter_bootstrap.js" async></script>
+    <noscript>JavaScript is required to run this app.</noscript>
   </body>
 </html>
diff --git a/lib/main.dart b/lib/main.dart
new file mode 100644
index 0000000..aaaaaaa
--- /dev/null
+++ b/lib/main.dart
@@ -0,0 +1,164 @@
+import 'package:flutter/material.dart';
+import 'package:go_router/go_router.dart';
+import 'widgets/nav_bar.dart';
+import 'widgets/footer.dart';
+import 'screens/dashboard_screen.dart';
+import 'screens/projects_screen.dart';
+import 'screens/metering_screen.dart';
+import 'screens/analysis_screen.dart';
+import 'screens/contracts_screen.dart';
+import 'screens/settings_screen.dart';
+import 'screens/workflow_screen.dart';
+import 'screens/price_list_screen.dart';
+import 'screens/report_screen.dart';
+import 'screens/features_screen.dart';
+
+void main() {
+  runApp(const MetreyarApp());
+}
+
+class MetreyarApp extends StatelessWidget {
+  const MetreyarApp({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    final router = GoRouter(
+      initialLocation: '/dashboard',
+      routes: [
+        ShellRoute(
+          builder: (context, state, child) => AppScaffold(child: child),
+          routes: [
+            GoRoute(path: '/dashboard', builder: (c, s) => const DashboardScreen()),
+            GoRoute(path: '/projects', builder: (c, s) => const ProjectsScreen()),
+            GoRoute(path: '/metering', builder: (c, s) => const MeteringScreen()),
+            GoRoute(path: '/analysis', builder: (c, s) => const AnalysisScreen()),
+            GoRoute(path: '/contracts', builder: (c, s) => const ContractsScreen()),
+            GoRoute(path: '/settings', builder: (c, s) => const SettingsScreen()),
+            GoRoute(path: '/workflow', builder: (c, s) => const WorkflowScreen()),
+            GoRoute(path: '/price-list', builder: (c, s) => const PriceListScreen()),
+            GoRoute(path: '/report', builder: (c, s) => const ReportScreen()),
+            GoRoute(path: '/features', builder: (c, s) => const FeaturesScreen()),
+          ],
+        ),
+      ],
+    );
+
+    return MaterialApp.router(
+      title: 'Metreyar',
+      debugShowCheckedModeBanner: false,
+      theme: ThemeData(
+        colorSchemeSeed: Colors.indigo,
+        useMaterial3: true,
+        visualDensity: VisualDensity.adaptivePlatformDensity,
+        fontFamily: 'IRANSans',
+      ),
+      routerConfig: router,
+    );
+  }
+}
+
+/// Main layout with persistent NavBar & Footer
+class AppScaffold extends StatelessWidget {
+  final Widget child;
+  const AppScaffold({super.key, required this.child});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: PreferredSize(
+        preferredSize: const Size.fromHeight(64),
+        child: const NavBar(),
+      ),
+      body: Container(
+        alignment: Alignment.topCenter,
+        child: ConstrainedBox(
+          constraints: const BoxConstraints(maxWidth: 1200),
+          child: Padding(
+            padding: const EdgeInsets.all(16.0),
+            child: child,
+          ),
+        ),
+      ),
+      bottomNavigationBar: const Footer(),
+    );
+  }
+}
diff --git a/lib/widgets/nav_bar.dart b/lib/widgets/nav_bar.dart
new file mode 100644
index 0000000..bbbbbbb
--- /dev/null
+++ b/lib/widgets/nav_bar.dart
@@ -0,0 +1,93 @@
+import 'package:flutter/material.dart';
+import 'package:go_router/go_router.dart';
+
+class NavBar extends StatelessWidget {
+  const NavBar({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    final tabs = <_NavItem>[
+      _NavItem('داشبورد', '/dashboard'),
+      _NavItem('پروژه‌ها', '/projects'),
+      _NavItem('متره', '/metering'),
+      _NavItem('آنالیز', '/analysis'),
+      _NavItem('قراردادها', '/contracts'),
+      _NavItem('گردش‌کار', '/workflow'),
+      _NavItem('فهرست‌بها', '/price-list'),
+      _NavItem('گزارش', '/report'),
+      _NavItem('امکانات', '/features'),
+      _NavItem('تنظیمات', '/settings'),
+    ];
+
+    return AppBar(
+      titleSpacing: 8,
+      title: Row(
+        children: [
+          const FlutterLogo(size: 28),
+          const SizedBox(width: 8),
+          const Text('Metreyar', style: TextStyle(fontWeight: FontWeight.bold)),
+          const Spacer(),
+          Wrap(
+            spacing: 8,
+            runSpacing: 8,
+            children: tabs.map((t) {
+              final selected = GoRouterState.of(context).uri.toString().startsWith(t.path);
+              return TextButton(
+                onPressed: () => context.go(t.path),
+                style: TextButton.styleFrom(
+                  foregroundColor: selected ? Theme.of(context).colorScheme.primary : null,
+                ),
+                child: Text(t.label),
+              );
+            }).toList(),
+          ),
+        ],
+      ),
+    );
+  }
+}
+
+class _NavItem {
+  final String label;
+  final String path;
+  _NavItem(this.label, this.path);
+}
diff --git a/lib/widgets/footer.dart b/lib/widgets/footer.dart
new file mode 100644
index 0000000..ccccccc
--- /dev/null
+++ b/lib/widgets/footer.dart
@@ -0,0 +1,33 @@
+import 'package:flutter/material.dart';
+
+class Footer extends StatelessWidget {
+  const Footer({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
+      decoration: BoxDecoration(
+        border: Border(top: BorderSide(color: Theme.of(context).dividerColor)),
+        color: Theme.of(context).colorScheme.surface,
+      ),
+      child: Row(
+        children: [
+          Text('© ${DateTime.now().year} Metreyar', style: Theme.of(context).textTheme.bodySmall),
+          const Spacer(),
+          Text('نسخه وب', style: Theme.of(context).textTheme.bodySmall),
+        ],
+      ),
+    );
+  }
+}
diff --git a/lib/screens/dashboard_screen.dart b/lib/screens/dashboard_screen.dart
new file mode 100644
index 0000000..ddddddd
--- /dev/null
+++ b/lib/screens/dashboard_screen.dart
@@ -0,0 +1,156 @@
+import 'package:flutter/material.dart';
+import 'package:fl_chart/fl_chart.dart';
+import 'package:intl/intl.dart';
+
+class DashboardScreen extends StatelessWidget {
+  const DashboardScreen({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    final currency = NumberFormat.decimalPattern('fa');
+    final cards = [
+      _Kpi('پروژه‌های فعال', '8'),
+      _Kpi('هزینه کل (تومان)', currency.format(185000000)),
+      _Kpi('میانگین پیشرفت', '64%'),
+      _Kpi('وظایف امروز', '12'),
+    ];
+
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Wrap(
+          spacing: 12,
+          runSpacing: 12,
+          children: cards.map((k) => _KpiCard(k)).toList(),
+        ),
+        const SizedBox(height: 24),
+        Card(
+          child: Padding(
+            padding: const EdgeInsets.all(16),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Text('روند هزینه ماهانه', style: Theme.of(context).textTheme.titleMedium),
+                const SizedBox(height: 16),
+                SizedBox(
+                  height: 260,
+                  child: LineChart(
+                    LineChartData(
+                      gridData: const FlGridData(show: true),
+                      titlesData: FlTitlesData(
+                        bottomTitles: AxisTitles(sideTitles: SideTitles(showTitles: true, getTitlesWidget: (v, m) {
+                          const labels = ['ف', 'ا', 'ا', 'ت', 'خ', 'م', 'آ', 'آ', 'آ', 'د', 'ب', 'ا'];
+                          final index = v.toInt();
+                          return index >= 0 && index < labels.length ? Text(labels[index]) : const SizedBox();
+                        })),
+                        leftTitles: const AxisTitles(sideTitles: SideTitles(showTitles: true, reservedSize: 40)),
+                        rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
+                        topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
+                      ),
+                      lineBarsData: [
+                        LineChartBarData(
+                          isCurved: true,
+                          barWidth: 3,
+                          spots: const [
+                            FlSpot(0, 10),
+                            FlSpot(1, 14),
+                            FlSpot(2, 12),
+                            FlSpot(3, 18),
+                            FlSpot(4, 13),
+                            FlSpot(5, 22),
+                            FlSpot(6, 19),
+                            FlSpot(7, 24),
+                            FlSpot(8, 20),
+                            FlSpot(9, 27),
+                            FlSpot(10, 26),
+                            FlSpot(11, 30),
+                          ],
+                        ),
+                      ],
+                    ),
+                  ),
+                ),
+              ],
+            ),
+          ),
+        ),
+      ],
+    );
+  }
+}
+
+class _Kpi {
+  final String title;
+  final String value;
+  _Kpi(this.title, this.value);
+}
+
+class _KpiCard extends StatelessWidget {
+  final _Kpi kpi;
+  const _KpiCard(this.kpi);
+  @override
+  Widget build(BuildContext context) {
+    return SizedBox(
+      width: 280,
+      child: Card(
+        child: Padding(
+          padding: const EdgeInsets.all(16.0),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              Text(kpi.title, style: Theme.of(context).textTheme.labelLarge),
+              const SizedBox(height: 8),
+              Text(kpi.value, style: Theme.of(context).textTheme.headlineSmall),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/screens/projects_screen.dart b/lib/screens/projects_screen.dart
new file mode 100644
index 0000000..eeeeeee
--- /dev/null
+++ b/lib/screens/projects_screen.dart
@@ -0,0 +1,196 @@
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class ProjectsScreen extends StatefulWidget {
+  const ProjectsScreen({super.key});
+  @override
+  State<ProjectsScreen> createState() => _ProjectsScreenState();
+}
+
+class _ProjectsScreenState extends State<ProjectsScreen> {
+  final _controller = TextEditingController();
+  int? _sortColumnIndex;
+  bool _ascending = true;
+
+  final _currency = NumberFormat.decimalPattern('fa');
+
+  final List<Map<String, dynamic>> _rows = [
+    {"name": "برج A", "status": "درحال اجرا", "progress": 62, "cost": 120000000, "start": DateTime(2025, 3, 1)},
+    {"name": "مجتمع B", "status": "برنامه‌ریزی", "progress": 15, "cost": 32000000, "start": DateTime(2025, 5, 10)},
+    {"name": "سوله C", "status": "تکمیل", "progress": 100, "cost": 78000000, "start": DateTime(2024, 12, 1)},
+  ];
+
+  List<Map<String, dynamic>> get _filtered {
+    final q = _controller.text.trim();
+    if (q.isEmpty) return _rows;
+    return _rows.where((e) => e["name"].toString().contains(q) || e["status"].toString().contains(q)).toList();
+  }
+
+  void _sort<T>(Comparable<T> Function(Map<String, dynamic> row) getField, int columnIndex, bool ascending) {
+    _filtered.sort((a, b) {
+      final aVal = getField(a);
+      final bVal = getField(b);
+      return ascending ? Comparable.compare(aVal, bVal) : Comparable.compare(bVal, aVal);
+    });
+    setState(() {
+      _sortColumnIndex = columnIndex;
+      _ascending = ascending;
+    });
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Row(
+          children: [
+            Expanded(
+              child: TextField(
+                controller: _controller,
+                decoration: const InputDecoration(
+                  prefixIcon: Icon(Icons.search),
+                  hintText: 'جست‌وجو در پروژه‌ها…',
+                  border: OutlineInputBorder(),
+                ),
+                onChanged: (_) => setState(() {}),
+              ),
+            ),
+            const SizedBox(width: 12),
+            FilledButton.icon(
+              onPressed: () {
+                setState(() {
+                  _rows.add({
+                    "name": "پروژه جدید ${_rows.length + 1}",
+                    "status": "برنامه‌ریزی",
+                    "progress": 0,
+                    "cost": 0,
+                    "start": DateTime.now(),
+                  });
+                });
+              },
+              icon: const Icon(Icons.add),
+              label: const Text('افزودن پروژه'),
+            ),
+          ],
+        ),
+        const SizedBox(height: 16),
+        SingleChildScrollView(
+          scrollDirection: Axis.horizontal,
+          child: DataTable(
+            sortColumnIndex: _sortColumnIndex,
+            sortAscending: _ascending,
+            columns: [
+              DataColumn(
+                label: const Text('نام'),
+                onSort: (ci, asc) => _sort((r) => r["name"] as String, ci, asc),
+              ),
+              DataColumn(
+                label: const Text('وضعیت'),
+                onSort: (ci, asc) => _sort((r) => r["status"] as String, ci, asc),
+              ),
+              DataColumn(
+                label: const Text('پیشرفت (%)'),
+                numeric: true,
+                onSort: (ci, asc) => _sort((r) => r["progress"] as int, ci, asc),
+              ),
+              DataColumn(
+                label: const Text('هزینه (تومان)'),
+                numeric: true,
+                onSort: (ci, asc) => _sort((r) => r["cost"] as int, ci, asc),
+              ),
+              const DataColumn(label: Text('تاریخ شروع')),
+              const DataColumn(label: Text('عملیات')),
+            ],
+            rows: _filtered.map((p) {
+              return DataRow(
+                cells: [
+                  DataCell(Text(p["name"])),
+                  DataCell(Text(p["status"])),
+                  DataCell(Text('${p["progress"]}%')),
+                  DataCell(Text(_currency.format(p["cost"]))),
+                  DataCell(Text(DateFormat('yyyy/MM/dd').format(p["start"]))),
+                  DataCell(Row(
+                    children: [
+                      IconButton(onPressed: () {}, icon: const Icon(Icons.visibility)),
+                      IconButton(onPressed: () {}, icon: const Icon(Icons.edit)),
+                      IconButton(
+                        onPressed: () => setState(() => _rows.remove(p)),
+                        icon: const Icon(Icons.delete_outline),
+                      ),
+                    ],
+                  )),
+                ],
+              );
+            }).toList(),
+          ),
+        ),
+      ],
+    );
+  }
+}
diff --git a/lib/screens/metering_screen.dart b/lib/screens/metering_screen.dart
new file mode 100644
index 0000000..fffffff
--- /dev/null
+++ b/lib/screens/metering_screen.dart
@@ -0,0 +1,173 @@
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class MeteringScreen extends StatefulWidget {
+  const MeteringScreen({super.key});
+  @override
+  State<MeteringScreen> createState() => _MeteringScreenState();
+}
+
+class _MeteringScreenState extends State<MeteringScreen> {
+  final _currency = NumberFormat.decimalPattern('fa');
+  final _rows = <_MeterRow>[
+    _MeterRow(desc: 'بتن C25', unit: 'متر مکعب', qty: 12, unitPrice: 1850000),
+    _MeterRow(desc: 'میلگرد آجدار', unit: 'کیلوگرم', qty: 2500, unitPrice: 49000),
+  ];
+
+  num get total => _rows.fold<num>(0, (s, r) => s + r.amount);
+
+  void _addRow() => setState(() => _rows.add(_MeterRow()));
+  void _removeRow(int i) => setState(() => _rows.removeAt(i));
+
+  @override
+  Widget build(BuildContext context) {
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Row(
+          children: [
+            FilledButton.icon(onPressed: _addRow, icon: const Icon(Icons.add), label: const Text('افزودن ردیف')),
+            const SizedBox(width: 12),
+            OutlinedButton.icon(
+              onPressed: _rows.isEmpty ? null : () => setState(_rows.clear),
+              icon: const Icon(Icons.clear_all),
+              label: const Text('پاک‌سازی'),
+            ),
+          ],
+        ),
+        const SizedBox(height: 12),
+        SingleChildScrollView(
+          scrollDirection: Axis.horizontal,
+          child: DataTable(
+            columnSpacing: 16,
+            columns: const [
+              DataColumn(label: Text('شرح')),
+              DataColumn(label: Text('واحد')),
+              DataColumn(label: Text('مقدار'), numeric: true),
+              DataColumn(label: Text('فی واحد (تومان)'), numeric: true),
+              DataColumn(label: Text('مبلغ (تومان)'), numeric: true),
+              DataColumn(label: Text('')),
+            ],
+            rows: [
+              for (var i = 0; i < _rows.length; i++)
+                DataRow(cells: [
+                  DataCell(_TextCell(
+                    initial: _rows[i].desc,
+                    hint: 'شرح آیتم',
+                    onChanged: (v) => setState(() => _rows[i] = _rows[i].copyWith(desc: v)),
+                  )),
+                  DataCell(_TextCell(
+                    initial: _rows[i].unit,
+                    hint: 'واحد',
+                    onChanged: (v) => setState(() => _rows[i] = _rows[i].copyWith(unit: v)),
+                  )),
+                  DataCell(_NumCell(
+                    initial: _rows[i].qty,
+                    onChanged: (v) => setState(() => _rows[i] = _rows[i].copyWith(qty: v)),
+                  )),
+                  DataCell(_NumCell(
+                    initial: _rows[i].unitPrice,
+                    onChanged: (v) => setState(() => _rows[i] = _rows[i].copyWith(unitPrice: v)),
+                  )),
+                  DataCell(Align(
+                    alignment: Alignment.centerLeft,
+                    child: Text(_currency.format(_rows[i].amount)),
+                  )),
+                  DataCell(IconButton(onPressed: () => _removeRow(i), icon: const Icon(Icons.delete_outline))),
+                ]),
+            ],
+          ),
+        ),
+        const SizedBox(height: 16),
+        Align(
+          alignment: Alignment.centerLeft,
+          child: Text('جمع کل: ${_currency.format(total)} تومان', style: Theme.of(context).textTheme.titleMedium),
+        ),
+      ],
+    );
+  }
+}
+
+class _MeterRow {
+  final String desc;
+  final String unit;
+  final num qty;
+  final num unitPrice;
+  const _MeterRow({this.desc = '', this.unit = '', this.qty = 0, this.unitPrice = 0});
+  num get amount => qty * unitPrice;
+  _MeterRow copyWith({String? desc, String? unit, num? qty, num? unitPrice}) =>
+      _MeterRow(desc: desc ?? this.desc, unit: unit ?? this.unit, qty: qty ?? this.qty, unitPrice: unitPrice ?? this.unitPrice);
+}
+
+class _TextCell extends StatefulWidget {
+  final String initial;
+  final String hint;
+  final ValueChanged<String> onChanged;
+  const _TextCell({required this.initial, required this.hint, required this.onChanged});
+  @override
+  State<_TextCell> createState() => _TextCellState();
+}
+
+class _TextCellState extends State<_TextCell> {
+  late final TextEditingController _c = TextEditingController(text: widget.initial);
+  @override
+  Widget build(BuildContext context) {
+    return SizedBox(
+      width: 220,
+      child: TextField(
+        controller: _c,
+        decoration: InputDecoration(isDense: true, hintText: widget.hint, border: const OutlineInputBorder()),
+        onChanged: widget.onChanged,
+      ),
+    );
+  }
+}
+
+class _NumCell extends StatefulWidget {
+  final num initial;
+  final ValueChanged<num> onChanged;
+  const _NumCell({required this.initial, required this.onChanged});
+  @override
+  State<_NumCell> createState() => _NumCellState();
+}
+
+class _NumCellState extends State<_NumCell> {
+  late final TextEditingController _c = TextEditingController(text: widget.initial.toString());
+  @override
+  Widget build(BuildContext context) {
+    return SizedBox(
+      width: 160,
+      child: TextField(
+        controller: _c,
+        keyboardType: TextInputType.number,
+        decoration: const InputDecoration(isDense: true, border: OutlineInputBorder()),
+        onChanged: (v) => widget.onChanged(num.tryParse(v) ?? 0),
+      ),
+    );
+  }
+}
+
diff --git a/lib/screens/price_list_screen.dart b/lib/screens/price_list_screen.dart
new file mode 100644
index 0000000..1212121
--- /dev/null
+++ b/lib/screens/price_list_screen.dart
@@ -0,0 +1,109 @@
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class PriceListScreen extends StatefulWidget {
+  const PriceListScreen({super.key});
+  @override
+  State<PriceListScreen> createState() => _PriceListScreenState();
+}
+
+class _PriceListScreenState extends State<PriceListScreen> {
+  final _controller = TextEditingController();
+  final _currency = NumberFormat.decimalPattern('fa');
+  final _items = <Map<String, dynamic>>[
+    {"code": "010101", "desc": "خاکبرداری دستی", "unit": "م3", "price": 120000},
+    {"code": "010102", "desc": "حمل نخاله", "unit": "تن", "price": 85000},
+    {"code": "020201", "desc": "بتن‌ریزی فونداسیون", "unit": "م3", "price": 1950000},
+  ];
+
+  @override
+  Widget build(BuildContext context) {
+    final q = _controller.text.trim();
+    final filtered = q.isEmpty
+        ? _items
+        : _items.where((e) => e["code"].toString().contains(q) || e["desc"].toString().contains(q)).toList();
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        TextField(
+          controller: _controller,
+          decoration: const InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'کد/شرح را جست‌وجو کنید', border: OutlineInputBorder()),
+          onChanged: (_) => setState(() {}),
+        ),
+        const SizedBox(height: 12),
+        SingleChildScrollView(
+          scrollDirection: Axis.horizontal,
+          child: DataTable(
+            columns: const [
+              DataColumn(label: Text('کد')),
+              DataColumn(label: Text('شرح')),
+              DataColumn(label: Text('واحد')),
+              DataColumn(label: Text('فی واحد (تومان)'), numeric: true),
+            ],
+            rows

